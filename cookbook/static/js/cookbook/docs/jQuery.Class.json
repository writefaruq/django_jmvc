c({"name": "jQuery.Class", "type": "class", "comment": "<p>Class provides simulated inheritance in JavaScript. Use clss to bridge the gap between\njQuery's functional programming style and Object Oriented Programming. It \nis based off John Resig's [http://ejohn.org/blog/simple-javascript-inheritance/|Simple Class]\nInheritance library.  Besides prototypal inheritance, it includes a few important features:</p>\n\n<ul>\n<li>Static inheritance</li>\n<li>Introspection</li>\n<li>Namespaces</li>\n<li>Setup and initialization methods</li>\n<li>Easy callback function creation</li>\n</ul>\n\n<p>The [mvc.class Get Started with jQueryMX] has a good walkthrough of $.Class.</p>\n\n<h2>Static v. Prototype</h2>\n\n<p>Before learning about Class, it's important to\nunderstand the difference between\na class's <strong>static</strong> and <strong>prototype</strong> properties.</p>\n\n<pre><code>//STATIC\nMyClass.staticProperty  //shared property\n\n//PROTOTYPE\nmyclass = new MyClass()\nmyclass.prototypeMethod() //instance method\n</code></pre>\n\n<p>A static (or class) property is on the Class constructor\nfunction itself\nand can be thought of being shared by all instances of the \nClass. Prototype propertes are available only on instances of the Class.</p>\n\n<h2>A Basic Class</h2>\n\n<p>The following creates a Monster class with a\nname (for introspection), static, and prototype members.\nEvery time a monster instance is created, the static\ncount is incremented.</p>\n\n<pre><code class='javascript'>$.Class('Monster',\n/* @static */\n{\n  count: 0\n},\n/* @prototype */\n{\n  init: function( name ) {\n\n    // saves name on the monster instance\n    this.name = name;\n\n    // sets the health\n    this.health = 10;\n\n    // increments count\n    this.constructor.count++;\n  },\n  eat: function( smallChildren ){\n    this.health += smallChildren;\n  },\n  fight: function() {\n    this.health -= 2;\n  }\n});\n\nhydra = new Monster('hydra');\n\ndragon = new Monster('dragon');\n\nhydra.name        // -> hydra\nMonster.count     // -> 2\nMonster.shortName // -> 'Monster'\n\nhydra.eat(2);     // health = 12\n\ndragon.fight();   // health = 8\n</code></pre>\n\n<p>Notice that the prototype <b>init</b> function is called when a new instance of Monster is created.</p>\n\n<h2>Inheritance</h2>\n\n<p>When a class is extended, all static and prototype properties are available on the new class.\nIf you overwrite a function, you can call the base class's function by calling\n<code>this._super</code>.  Lets create a SeaMonster class.  SeaMonsters are less\nefficient at eating small children, but more powerful fighters.</p>\n\n<pre><code>Monster(\"SeaMonster\",{\n  eat: function( smallChildren ) {\n    this._super(smallChildren / 2);\n  },\n  fight: function() {\n    this.health -= 1;\n  }\n});\n\nlockNess = new SeaMonster('Lock Ness');\nlockNess.eat(4);   //health = 12\nlockNess.fight();  //health = 11\n</code></pre>\n\n<h3>Static property inheritance</h3>\n\n<p>You can also inherit static properties in the same way:</p>\n\n<pre><code>$.Class(\"First\",\n{\n    staticMethod: function() { return 1;}\n},{})\n\nFirst(\"Second\",{\n    staticMethod: function() { return this._super()+1;}\n},{})\n\nSecond.staticMethod() // -&gt; 2\n</code></pre>\n\n<h2>Namespaces</h2>\n\n<p>Namespaces are a good idea! We encourage you to namespace all of your code.\nIt makes it possible to drop your code into another app without problems.\nMaking a namespaced class is easy:</p>\n\n<pre><code>$.Class(\"MyNamespace.MyClass\",{},{});\n\nnew MyNamespace.MyClass()\n</code></pre>\n\n<h2 id='introspection'>Introspection</h2>\n\n<p>Often, it's nice to create classes whose name helps determine functionality.  Ruby on\nRails's [http://api.rubyonrails.org/classes/ActiveRecord/Base.html|ActiveRecord] ORM class\nis a great example of this.  Unfortunately, JavaScript doesn't have a way of determining\nan object's name, so the developer must provide a name.  Class fixes this by taking a String name for the class.</p>\n\n<pre><code>$.Class(\"MyOrg.MyClass\",{},{})\nMyOrg.MyClass.shortName //-&gt; 'MyClass'\nMyOrg.MyClass.fullName //-&gt;  'MyOrg.MyClass'\n</code></pre>\n\n<p>The fullName (with namespaces) and the shortName (without namespaces) are added to the Class's\nstatic properties.</p>\n\n<h2>Setup and initialization methods</h2>\n\n<p>\nClass provides static and prototype initialization functions.\nThese come in two flavors - setup and init.\nSetup is called before init and\ncan be used to 'normalize' init's arguments.\n</p>\n\n<div class='whisper'>PRO TIP: Typically, you don't need setup methods in your classes. Use Init instead.\nReserve setup methods for when you need to do complex pre-processing of your class before init is called.\n\n</div>\n\n<pre><code class='javascript'>$.Class(\"MyClass\",\n{\n  setup: function() {} //static setup\n  init: function() {} //static constructor\n},\n{\n  setup: function() {} //prototype setup\n  init: function() {} //prototype constructor\n})</code></pre>\n\n<h3>Setup</h3>\n\n<p>Setup functions are called before init functions.  Static setup functions are passed\nthe base class followed by arguments passed to the extend function.\nPrototype static functions are passed the Class constructor \nfunction arguments.</p>\n\n<p>If a setup function returns an array, that array will be used as the arguments\nfor the following init method.  This provides setup functions the ability to normalize\narguments passed to the init constructors.  They are also excellent places\nto put setup code you want to almost always run.</p>\n\n<p>The following is similar to how [jQuery.Controller.prototype.setup]\nmakes sure init is always called with a jQuery element and merged options\neven if it is passed a raw\nHTMLElement and no second parameter.</p>\n\n<pre><code>$.Class(\"jQuery.Controller\",{\n  ...\n},{\n  setup: function( el, options ) {\n    ...\n    return [$(el),\n            $.extend(true,\n               this.Class.defaults,\n               options || {} ) ]\n  }\n})\n</code></pre>\n\n<p>Typically, you won't need to make or overwrite setup functions.</p>\n\n<h3>Init</h3>\n\n<p>Init functions are called after setup functions.\nTypically, they receive the same arguments\nas their preceding setup function.  The Foo class's <code>init</code> method\ngets called in the following example:</p>\n\n<pre><code>$.Class(\"Foo\", {\n  init: function( arg1, arg2, arg3 ) {\n    this.sum = arg1+arg2+arg3;\n  }\n})\nvar foo = new Foo(1,2,3);\nfoo.sum //-&gt; 6\n</code></pre>\n\n<h2>Proxies</h2>\n\n<p>Similar to jQuery's proxy method, Class provides a\n[jQuery.Class.static.proxy proxy]\nfunction that returns a callback to a method that will always\nhave\n<code>this</code> set to the class or instance of the class.</p>\n\n<p>The following example uses this.proxy to make sure\n<code>this.name</code> is available in <code>show</code>.</p>\n\n<pre><code>$.Class(\"Todo\",{\n  init: function( name ) { \n      this.name = name \n  },\n  get: function() {\n    $.get(\"/stuff\",this.proxy('show'))\n  },\n  show: function( txt ) {\n    alert(this.name+txt)\n  }\n})\nnew Todo(\"Trash\").get()\n</code></pre>\n\n<p>Callback is available as a static and prototype method.</p>\n\n<h2>Demo</h2>\n\n<div class='demo_wrapper' data-demo-src='jquery/class/class.html'></div>", "plugin": "jquery/class", "parents": ["jquerymx"], "download": "dist/jquery/jquery.class.js", "test": "jquery/class/qunit.html", "description": "Easy inheritance in JavaScript.", "construct": "<p>To create a Class call:</p>\n\n<pre><code>$.Class( [NAME , STATIC,] PROTOTYPE ) -&gt; Class\n</code></pre>\n\n<div class='params'>\n  <div class='param'><label>NAME</label><code>{optional:String}</code>\n  <p>If provided, this sets the shortName and fullName of the \n     class and adds it and any necessary namespaces to the \n     window object.</p>\n  </div>\n  <div class='param'><label>STATIC</label><code>{optional:Object}</code>\n  <p>If provided, this creates static properties and methods\n  on the class.</p>\n  </div>\n  <div class='param'><label>PROTOTYPE</label><code>{Object}</code>\n  <p>Creates prototype methods on the class.</p>\n  </div>\n</div>\n\n<p>When a Class is created, the static [jQuery.Class.static.setup setup] \nand [jQuery.Class.static.init init]  methods are called.</p>\n\n<p>To create an instance of a Class, call:</p>\n\n<pre><code>new Class([args ... ]) -&gt; instance\n</code></pre>\n\n<p>The created instance will have all the \nprototype properties and methods defined by the PROTOTYPE object.</p>\n\n<p>When an instance is created, the prototype [jQuery.Class.prototype.setup setup] \nand [jQuery.Class.prototype.init init]  methods \nare called.</p>", "ret": {"type": "jquery.class", "description": ""}, "src": "jquery/class/class.js", "line": 55, "children": ["jQuery.Class.static", "jQuery.Class.prototype"]})