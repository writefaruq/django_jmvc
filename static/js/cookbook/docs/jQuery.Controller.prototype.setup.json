c({"name": "jQuery.Controller.prototype.setup", "params": {"element": {"description": "<p>the element this instance operates on.</p>", "type": "HTMLElement", "optional": false, "order": 0, "name": "element"}, "options": {"description": "<p>option values for the controller.  These get added to\nthis.options and merged with [jQuery.Controller.static.defaults defaults].</p>", "type": "Object", "optional": true, "order": 1, "name": "options"}}, "ret": {"description": "<p>return an array if you wan to change what init is called with. By\ndefault it is called with the element and options passed to the controller.</p>", "type": "Array"}, "type": "function", "parents": ["jQuery.Controller.prototype"], "comment": "<p>Setup is where most of controller's magic happens.  It does the following:</p>\n\n<h3>1. Sets this.element</h3>\n\n<p>The first parameter passed to new Controller(el, options) is expected to be \nan element.  This gets converted to a jQuery wrapped element and set as\n[jQuery.Controller.prototype.element this.element].</p>\n\n<h3>2. Adds the controller's name to the element's className.</h3>\n\n<p>Controller adds it's plugin name to the element's className for easier \ndebugging.  For example, if your Controller is named \"Foo.Bar\", it adds\n\"foo_bar\" to the className.</p>\n\n<h3>3. Saves the controller in $.data</h3>\n\n<p>A reference to the controller instance is saved in $.data.  You can find \ninstances of \"Foo.Bar\" like: </p>\n\n<pre><code>$(\"#el\").data(\"controllers\")['foo_bar'].\n</code></pre>\n\n<h3>Binds event handlers</h3>\n\n<p>Setup does the event binding described in [jquery.controller.listening Listening To Events].</p>", "src": "jquery/controller/controller.js", "line": 578, "children": []})