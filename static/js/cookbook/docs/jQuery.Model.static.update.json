c({"name": "jQuery.Model.static.update", "type": "function", "parents": ["jQuery.Model.static"], "comment": "<p>Update is used by [$.Model.prototype.save save] to \nupdate a model instance on the server. </p>\n\n<p>The easist way to implement update is to just give it the url to <code>PUT</code> data to:</p>\n\n<pre><code>$.Model(\"Recipe\",{\n  update: \"/recipes/{id}\"\n},{})\n</code></pre>\n\n<p>This lets you update a recipe like:</p>\n\n<pre><code>// PUT /recipes/5 {name: \"Hot Dog\"}\nRecipe.update(5, {name: \"Hot Dog\"},\n  function(){\n    this.name //this is the updated recipe\n  })\n</code></pre>\n\n<p>If your server doesn't use PUT, you can change it to post like:</p>\n\n<pre><code>$.Model(\"Recipe\",{\n  update: \"POST /recipes/{id}\"\n},{})\n</code></pre>\n\n<p>Your server should send back an object with any new attributes the model \nshould have.  For example if your server udpates the \"updatedAt\" property, it\nshould send back something like:</p>\n\n<pre><code>// PUT /recipes/4 {name: \"Food\"} -&gt;\n{\n  updatedAt : \"10-20-2011\"\n}\n</code></pre>\n\n<p>You can also implement create by yourself.  You just need to call success back with\nan object that contains any properties that should be\nset on the instance.</p>\n\n<p>For example, the following code makes a request \nto '/recipes/5.json?name=hot+dog' and gets back\nsomething that looks like:</p>\n\n<pre><code>{ \n  updatedAt: \"10-20-2011\"\n}\n</code></pre>\n\n<p>The code looks like:</p>\n\n<pre><code>$.Model(\"Recipe\", {\n  update : function(id, attrs, success, error){\n    $.post(\"/recipes/\"+id+\".json\",attrs, success,\"json\");\n  }\n},{})\n</code></pre>", "params": {"id": {"order": 0, "description": "<p>the id of the model instance</p>", "name": "id", "type": "String", "optional": false}, "attrs": {"order": 1, "description": "<p>Attributes on the model instance</p>", "name": "attrs", "type": "Object", "optional": false}, "success(attrs)": {"order": 2, "description": "<p>the callback function.  It optionally accepts \nan object of attribute / value pairs of property changes the client doesn't already \nknow about. For example, when you update a name property, the server might \nupdate other properties as well (such as updatedAt). The server should send \nthese properties as the response to updates.  Passing them to success will \nupdate the model instance with these properties.</p>", "name": "success(attrs)", "type": "Function", "optional": false}, "error": {"order": 3, "description": "<p>a function to callback if something goes wrong.  </p>", "name": "error", "type": "Function", "optional": false}}, "src": "jquery/model/model.js", "line": 549, "children": []})