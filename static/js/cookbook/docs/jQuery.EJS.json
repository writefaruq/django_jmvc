c({"name": "jQuery.EJS", "type": "class", "comment": "<p>Ejs provides <a href=\"http://www.ruby-doc.org/stdlib/libdoc/erb/rdoc/\">ERB</a> \nstyle client side templates.  Use them with controllers to easily build html and inject\nit into the DOM.</p>\n\n<h3>Example</h3>\n\n<p>The following generates a list of tasks:</p>\n\n<pre><code class='html'>&lt;ul>\n&lt;% for(var i = 0; i < tasks.length; i++){ %>\n    &lt;li class=\"task &lt;%= tasks[i].identity %>\">&lt;%= tasks[i].name %>&lt;/li>\n&lt;% } %>\n&lt;/ul></code></pre>\n\n<p>For the following examples, we assume this view is in <i>'views\\tasks\\list.ejs'</i>.</p>\n\n<h2>Use</h2>\n\n<h3>Loading and Rendering EJS:</h3>\n\n<p>You should use EJS through the helper functions [jQuery.View] provides such as:</p>\n\n<ul>\n<li>[jQuery.fn.after after]</li>\n<li>[jQuery.fn.append append]</li>\n<li>[jQuery.fn.before before]</li>\n<li>[jQuery.fn.html html], </li>\n<li>[jQuery.fn.prepend prepend],</li>\n<li>[jQuery.fn.replaceWith replaceWith], and </li>\n<li>[jQuery.fn.text text].</li>\n</ul>\n\n<p>or [jQuery.Controller.prototype.view].</p>\n\n<h3>Syntax</h3>\n\n<p>EJS uses 5 types of tags:</p>\n\n<ul>\n<li><p><code>&lt;% CODE %&gt;</code> - Runs JS Code.\nFor example:</p>\n\n<pre><code>&lt;% alert('hello world') %&gt;\n</code></pre></li>\n<li><p><code>&lt;%= CODE %&gt;</code> - Runs JS Code and writes the <em>escaped</em> result into the result of the template.\nFor example:</p>\n\n<pre><code>&lt;h1&gt;&lt;%= 'hello world' %&gt;&lt;/h1&gt;\n</code></pre></li>\n<li><p><code>&lt;%== CODE %&gt;</code> - Runs JS Code and writes the <em>unescaped</em> result into the result of the template.\nFor example:</p>\n\n<pre><code>&lt;h1&gt;&lt;%== '&lt;span&gt;hello world&lt;/span&gt;' %&gt;&lt;/h1&gt;\n</code></pre></li>\n<li><p><code>&lt;%%= CODE %&gt;</code> - Writes &lt;%= CODE %> to the result of the template.  This is very useful for generators.</p>\n\n<pre><code>&lt;%%= 'hello world' %&gt;\n</code></pre></li>\n<li><p><code>&lt;%# CODE %&gt;</code> - Used for comments.  This does nothing.</p>\n\n<pre><code>&lt;%# 'hello world' %&gt;\n</code></pre></li>\n</ul>\n\n<h2>Hooking up controllers</h2>\n\n<p>After drawing some html, you often want to add other widgets and plugins inside that html.\nView makes this easy.  You just have to return the Contoller class you want to be hooked up.</p>\n\n<pre><code class='javascript'>&lt;ul &lt;%= Mxui.Tabs%>>...&lt;ul></code></pre>\n\n<p>You can even hook up multiple controllers:</p>\n\n<pre><code class='javascript'>&lt;ul &lt;%= [Mxui.Tabs, Mxui.Filler]%>>...&lt;ul></code></pre>\n\n<p>To hook up a controller with options or any other jQuery plugin use the\n[jQuery.EJS.Helpers.prototype.plugin | plugin view helper]:</p>\n\n<pre><code class='javascript'>&lt;ul &lt;%= plugin('mxui_tabs', { option: 'value' }) %>>...&lt;ul></code></pre>\n\n<p>Don't add a semicolon when using view helpers.</p>\n\n<h2>View Helpers</h2>\n\n<p>View Helpers return html code.  View by default only comes with \n[jQuery.EJS.Helpers.prototype.view view] and [jQuery.EJS.Helpers.prototype.text text].\nYou can include more with the view/helpers plugin.  But, you can easily make your own!\nLearn how in the [jQuery.EJS.Helpers Helpers] page.</p>", "plugin": "jquery/view/ejs", "parents": ["jQuery.View"], "download": "http://jmvcsite.heroku.com/pluginify?plugins[]=jquery/view/ejs/ejs.js", "test": "jquery/view/ejs/qunit.html", "construct": "<p>Creates a new view</p>", "ret": {"type": "jquery.ejs", "description": ""}, "params": {"options": {"order": 0, "description": "<p>A hash with the following options</p>\n\n<table class=\"options\">\n    <tbody><tr><th>Option</th><th>Default</th><th>Description</th></tr>\n    <tr>\n     <td>text</td>\n     <td>&nbsp;</td>\n     <td>uses the provided text as the template. Example:<br/><code>new View({text: '&lt;%=user%>'})</code>\n     </td>\n    </tr>\n    <tr>\n     <td>type</td>\n     <td>'<'</td>\n     <td>type of magic tags.  Options are '&lt;' or '['\n     </td>\n    </tr>\n    <tr>\n     <td>name</td>\n     <td>the element ID or url </td>\n     <td>an optional name that is used for caching.\n     </td>\n    </tr>\n   </tbody></table>", "name": "options", "type": "Object", "optional": false}}, "src": "jquery/view/ejs/ejs.js", "line": 44, "children": ["jQuery.EJS.prototype", "jQuery.EJS.static", "jQuery.EJS.Helpers"]})