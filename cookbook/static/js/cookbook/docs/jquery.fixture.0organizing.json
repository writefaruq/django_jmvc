c({"name": "jquery.fixture.0organizing", "type": "page", "comment": "<p>The <strong>best</strong> way of organizing fixtures is to have a 'fixtures.js' file that steals\n<code>jquery/dom/fixture</code> and defines all your fixtures.  For example,\nif you have a 'todo' application, you might \nhave <code>todo/fixtures/fixtures.js</code> look like:</p>\n\n<pre><code>steal({\n        path: '//jquery/dom/fixture.js',\n        ignore: true\n      })\n      .then(function(){\n\n  $.fixture({\n      type: 'get',  \n      url: '/services/todos.json'\n    },\n    '//todo/fixtures/todos.json');\n\n  $.fixture({\n      type: 'post',  \n      url: '/services/todos.json'\n    },\n    function(settings){\n        return {id: Math.random(), \n             name: settings.data.name}\n    });\n\n})\n</code></pre>\n\n<p><strong>Notice</strong>: We used steal's ignore option to prevent \nloading the fixture plugin in production.</p>\n\n<p>Finally, we steal <code>todo/fixtures/fixtures.js</code> in the \napp file (<code>todo/todo.js</code>) like:</p>\n\n<pre><code>steal({path: '//todo/fixtures/fixtures.js',ignore: true});\n\n//start of your app's steals\nsteal( ... )\n</code></pre>\n\n<p>We typically keep it a one liner so it's easy to comment out.</p>\n\n<h2>Switching Between Sets of Fixtures</h2>\n\n<p>If you are using fixtures for testing, you often want to use different\nsets of fixtures.  You can add something like the following to your fixtures.js file:</p>\n\n<pre><code>if( /fixtureSet1/.test( window.location.search) ){\n  $.fixture(\"/foo\",\"//foo/fixtures/foo1.json');\n} else if(/fixtureSet2/.test( window.location.search)){\n  $.fixture(\"/foo\",\"//foo/fixtures/foo1.json');\n} else {\n  // default fixtures (maybe no fixtures)\n}\n</code></pre>", "title": "Organizing Fixtures", "parents": ["jQuery.fixture"], "src": "jquery/dom/fixture/fixture.js", "line": 840, "children": []})