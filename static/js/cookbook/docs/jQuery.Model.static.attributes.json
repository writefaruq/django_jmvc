c({"name": "jQuery.Model.static.attributes", "type": "attribute", "parents": ["jQuery.Model.static"], "comment": "<p>Attributes contains a map of attribute names/types. <br />\nYou can use this in conjunction with \n[$.Model.convert] to provide automatic \n[jquery.model.typeconversion type conversion] (including\nassociations).  </p>\n\n<p>The following converts dueDates to JavaScript dates:</p>\n\n<pre><code>$.Model(\"Contact\",{\n  attributes : { \n    birthday : 'date'\n  },\n  convert : {\n    date : function(raw){\n      if(typeof raw == 'string'){\n        var matches = raw.match(/(\\d+)-(\\d+)-(\\d+)/)\n        return new Date( matches[1], \n                 (+matches[2])-1, \n                matches[3] )\n      }else if(raw instanceof Date){\n          return raw;\n      }\n    }\n  }\n},{})\n</code></pre>\n\n<h2>Associations</h2>\n\n<p>Attribute type values can also represent the name of a \nfunction.  The most common case this is used is for\nassociated data. </p>\n\n<p>For example, a Deliverable might have many tasks and \nan owner (which is a Person).  The attributes property might\nlook like:</p>\n\n<pre><code>attributes : {\n  tasks : \"App.Models.Task.models\"\n  owner: \"App.Models.Person.model\"\n}\n</code></pre>\n\n<p>This points tasks and owner properties to use \n<code>Task.models</code> and <code>Person.model</code>\nto convert the raw data into an array of Tasks and a Person.</p>\n\n<p>Note that the full names of the models themselves are <code>App.Models.Task</code>\nand <code>App.Models.Person</code>. The <em>.model</em> and <em>.models</em> parts are appended\nfor the benefit of [$.Model.convert convert] to identify the types as \nmodels.</p>\n\n<div class='demo_wrapper' data-demo-src='jquery/model/pages/associations.html'></div>", "src": "jquery/model/model.js", "line": 786, "children": []})