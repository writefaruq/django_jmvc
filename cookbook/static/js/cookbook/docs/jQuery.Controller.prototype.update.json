c({"name": "jQuery.Controller.prototype.update", "params": {"options": {"description": "<p>A list of options to merge with \n[jQuery.Controller.prototype.options this.options].  Often, this method\nis called by the [jquery.controller.plugin jQuery helper function].</p>", "type": "Object", "optional": false, "order": 0, "name": "options"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["jQuery.Controller.prototype"], "comment": "<p>Update extends [jQuery.Controller.prototype.options this.options] \nwith the <code>options</code> argument and rebinds all events.  It basically\nre-configures the controller.</p>\n\n<p>For example, the following controller wraps a recipe form. When the form\nis submitted, it creates the recipe on the server.  When the recipe\nis <code>created</code>, it resets the form with a new instance.</p>\n\n<pre><code>$.Controller('Creator',{\n  \"{recipe} created\" : function(){\n    this.update({recipe : new Recipe()});\n    this.element[0].reset();\n    this.find(\"[type=submit]\").val(\"Create Recipe\")\n  },\n  \"submit\" : function(el, ev){\n    ev.preventDefault();\n    var recipe = this.options.recipe;\n    recipe.attrs( this.element.formParams() );\n    this.find(\"[type=submit]\").val(\"Saving...\")\n    recipe.save();\n  }\n});\n$('#createRecipes').creator({recipe : new Recipe()})\n</code></pre>\n\n<div class='demo_wrapper' data-demo-src='jquery/controller/demo-update.html'></div>\n\n<p>Update is called if a controller's [jquery.controller.plugin jQuery helper] is \ncalled on an element that already has a controller instance\nof the same type. </p>\n\n<p>For example, a widget that listens for model updates\nand updates it's html would look like.  </p>\n\n<pre><code>$.Controller('Updater',{\n  // when the controller is created, update the html\n  init : function(){\n    this.updateView();\n  },\n\n  // update the html with a template\n  updateView : function(){\n    this.element.html( \"content.ejs\",\n                       this.options.model ); \n  },\n\n  // if the model is updated\n  \"{model} updated\" : function(){\n    this.updateView();\n  },\n  update : function(options){\n    // make sure you call super\n    this._super(options);\n\n    this.updateView();\n  }\n})\n\n// create the controller\n// this calls init\n$('#item').updater({model: recipe1});\n\n// later, update that model\n// this calls \"{model} updated\"\nrecipe1.update({name: \"something new\"});\n\n// later, update the controller with a new recipe\n// this calls update\n$('#item').updater({model: recipe2});\n\n// later, update the new model\n// this calls \"{model} updated\"\nrecipe2.update({name: \"something newer\"});\n</code></pre>\n\n<p><em>NOTE:</em> If you overwrite <code>update</code>, you probably need to call\nthis._super.</p>\n\n<h3>Example</h3>\n\n<pre><code>$.Controller(\"Thing\",{\n  init: function( el, options ) {\n    alert( 'init:'+this.options.prop )\n  },\n  update: function( options ) {\n    this._super(options);\n    alert('update:'+this.options.prop)\n  }\n});\n$('#myel').thing({prop : 'val1'}); // alerts init:val1\n$('#myel').thing({prop : 'val2'}); // alerts update:val2\n</code></pre>", "src": "jquery/controller/controller.js", "line": 851, "children": []})